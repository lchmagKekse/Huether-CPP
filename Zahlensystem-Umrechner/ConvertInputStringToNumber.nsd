<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:nsd="https://structorizer.fisch.lu" version="3.32-11" preRepeat="until " postFor="to" preReturn="return" postForIn="in" preWhile="while " output="OUTPUT" input="INPUT" preFor="for" preExit="exit" preLeave="leave" ignoreCase="true" preThrow="throw" preForIn="foreach" stepFor="by" namespace="" author="Alex" created="2023-01-24" changedby="Alex" changed="2023-01-24" origin="Structorizer 3.32-11" text="&#34;int ConvertInputStringToNumber(std::string input, int base)&#34;" comment="&#34;&#34;" color="ffffff" type="program" style="nice">
	<children>
		<instruction text="&#34;char symbols[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };    &#34;,&#34;int number = 0;&#34;,&#34;std::vector&#60;uint8_t&#62; vec;&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
		<for text="&#34;for (int inputIterator = input.length() - 1; inputIterator &#62;= 0; inputIterator--)&#34;" comment="&#34;&#34;" counterVar="dummy_counter" startValue="(int inputIterator = input.length() - 1; inputIterator &#62;= 0; inputIterator--)" stepConst="1" style="FREETEXT" color="ffffff" disabled="0">
			<qFor>
				<for text="&#34;for (int symbolIterator = 0; symbolIterator &#60; sizeof(symbols); symbolIterator++)&#34;" comment="&#34;&#34;" counterVar="dummy_counter" startValue="(int symbolIterator = 0; symbolIterator &#60; sizeof(symbols); symbolIterator++)" stepConst="1" style="FREETEXT" color="ffffff" disabled="0">
					<qFor>
						<for text="&#34; if (toupper(input[inputIterator]) == symbols[symbolIterator])&#34;" comment="&#34;&#34;" counterVar="dummy_counter" startValue="if (toupper(input[inputIterator]) == symbols[symbolIterator])" stepConst="1" style="FREETEXT" color="ffffff" disabled="0">
							<qFor>
								<instruction text="&#34;vec.push_back(symbolIterator);&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
							</qFor>
						</for>
					</qFor>
				</for>
			</qFor>
		</for>
		<for text="&#34;for (int i = 0; i &#60; vec.size(); i++)&#34;" comment="&#34;&#34;" counterVar="dummy_counter" startValue="(int i = 0; i &#60; vec.size(); i++)" stepConst="1" style="FREETEXT" color="ffffff" disabled="0">
			<qFor>
				<instruction text="&#34;number += (vec[i] * pow(base, i));&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qFor>
		</for>
		<instruction text="&#34;return number;&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
	</children>
</root>